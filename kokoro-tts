#!/usr/bin/env python3

# Standard library imports
import os
import sys
import itertools
import threading
import time
import signal
import difflib
import warnings
from threading import Event
import re
import subprocess

# Third-party imports
import numpy as np
from ebooklib import epub, ITEM_DOCUMENT
from bs4 import BeautifulSoup
import soundfile as sf
import sounddevice as sd
from kokoro_onnx import Kokoro
import pymupdf4llm
import fitz

# Import refactored logic
from kokoro_tts import (
    validate_language, validate_voice, extract_chapters_from_epub, PdfParser,
    chunk_text, process_chunk_sequential, merge_chunks_to_chapters
)

warnings.filterwarnings("ignore", category=UserWarning, module='ebooklib')
warnings.filterwarnings("ignore", category=FutureWarning, module='ebooklib')

# Global flag to stop the spinner and audio
stop_spinner = False
stop_audio = False

def spinning_wheel(message="Processing...", progress=None):
    """Display a spinning wheel with a message."""
    spinner = itertools.cycle(['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'])
    while not stop_spinner:
        spin = next(spinner)
        if progress is not None:
            sys.stdout.write(f"\r{message} {progress} {spin}")
        else:
            sys.stdout.write(f"\r{message} {spin}")
        sys.stdout.flush()
        time.sleep(0.1)
    # Clear the spinner line when done
    sys.stdout.write('\r' + ' ' * (len(message) + 50) + '\r')
    sys.stdout.flush()

def list_available_voices(kokoro):
    voices = list(kokoro.get_voices())
    print("Available voices:")
    for idx, voice in enumerate(voices):
        print(f"{idx + 1}. {voice}")
    return voices

def print_usage():
    print("""
Usage: kokoro-tts <input_text_file> [<output_audio_file>] [options]

Commands:
    -h, --help         Show this help message
    --help-languages   List all supported languages
    --help-voices      List all available voices
    --merge-chunks     Merge existing chunks in split-output directory into chapter files
    --api              Start the API server (FastAPI, OpenAI-compatible)
    --port <number>    Specify port for --api (default: 8000)
    --host <host>      Specify host for --api (default: 127.0.0.1)

Options:
    --stream            Stream audio instead of saving to file
    --speed <float>     Set speech speed (default: 1.0)
    --lang <str>        Set language (default: en-us)
    --voice <str>       Set voice or blend voices (default: interactive selection)
    --split-output <dir> Save each chunk as separate file in directory
    --format <str>      Audio format: wav or mp3 (default: wav)
    --debug             Show detailed debug information

Input formats:
    .txt               Text file input
    .epub              EPUB book input (will process chapters)
    .pdf               PDF document input (extracts chapters from TOC or content)

Examples:
    kokoro-tts --api
    kokoro-tts --api --port 8080
    kokoro-tts --api --port 8080 --host 0.0.0.0
    kokoro-tts input.txt output.wav --speed 1.2 --lang en-us --voice af_sarah
    kokoro-tts input.epub --split-output ./chunks/ --format mp3
    kokoro-tts input.pdf output.wav --speed 1.2 --lang en-us --voice af_sarah
    kokoro-tts input.pdf --split-output ./chunks/ --format mp3
    kokoro-tts input.txt --stream --speed 0.8
    kokoro-tts input.txt output.wav --voice "af_sarah:60,am_adam:40"
    kokoro-tts input.txt --stream --voice "am_adam,af_sarah" # 50-50 blend
    kokoro-tts --merge-chunks --split-output ./chunks/ --format wav
    kokoro-tts --help-voices
    kokoro-tts --help-languages
    kokoro-tts input.epub --split-output ./chunks/ --debug
    """)

def print_supported_languages():
    """Print all supported languages from Kokoro."""
    try:
        kokoro = Kokoro("kokoro-v1.0.onnx", "voices-v1.0.bin")
        languages = sorted(kokoro.get_languages())
        print("\nSupported languages:")
        for lang in languages:
            print(f"    {lang}")
        print()
    except Exception as e:
        print(f"Error loading model to get supported languages: {e}")
        sys.exit(1)

def print_supported_voices():
    """Print all supported voices from Kokoro."""
    try:
        kokoro = Kokoro("kokoro-v1.0.onnx", "voices-v1.0.bin")
        voices = sorted(kokoro.get_voices())
        print("\nSupported voices:")
        for idx, voice in enumerate(voices):
            print(f"    {idx + 1}. {voice}")
        print()
    except Exception as e:
        print(f"Error loading model to get supported voices: {e}")
        sys.exit(1)

def convert_text_to_audio(input_file, output_file=None, voice=None, speed=1.0, lang="en-us", 
                         stream=False, split_output=None, format="wav", debug=False):
    global stop_spinner
    try:
        kokoro = Kokoro("kokoro-v1.0.onnx", "voices-v1.0.bin")
        lang = validate_language(lang, kokoro)
        if voice:
            voice = validate_voice(voice, kokoro)
        else:
            voices = list_available_voices(kokoro)
            print("\nHow to choose a voice:")
            print("You can use either a single voice or blend two voices together.")
            print("\nFor a single voice:")
            print("  • Just enter one number (example: '7')")
            print("\nFor blending two voices:")
            print("  • Enter two numbers separated by comma")
            print("  • Optionally add weights after each number using ':weight'")
            print("\nExamples:")
            print("  • '7'      - Use voice #7 only")
            print("  • '7,11'   - Mix voices #7 and #11 equally (50% each)")
            print("  • '7:60,11:40' - Mix 60% of voice #7 with 40% of voice #11")
            try:
                voice_input = input("Choose voice(s) by number: ")
                if ',' in voice_input:
                    pairs = []
                    for pair in voice_input.split(','):
                        if ':' in pair:
                            num, weight = pair.strip().split(':')
                            voice_idx = int(num.strip()) - 1
                            if not (0 <= voice_idx < len(voices)):
                                raise ValueError(f"Invalid voice number: {int(num)}")
                            pairs.append(f"{voices[voice_idx]}:{weight}")
                        else:
                            voice_idx = int(pair.strip()) - 1
                            if not (0 <= voice_idx < len(voices)):
                                raise ValueError(f"Invalid voice number: {int(pair)}")
                            pairs.append(voices[voice_idx])
                    voice = ','.join(pairs)
                else:
                    voice_choice = int(voice_input) - 1
                    if not (0 <= voice_choice < len(voices)):
                        raise ValueError("Invalid choice")
                    voice = voices[voice_choice]
                voice = validate_voice(voice, kokoro)
            except (ValueError, IndexError):
                print("Invalid choice. Using default voice.")
                voice = "af_sarah"
    except ValueError as e:
        print(f"Error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"Error loading Kokoro model: {e}")
        sys.exit(1)
    if input_file.endswith('.epub'):
        chapters = extract_chapters_from_epub(input_file, debug)
        if not chapters:
            print("No chapters found in EPUB file.")
            sys.exit(1)
    elif input_file.endswith('.pdf'):
        parser = PdfParser(input_file, debug=debug)
        chapters = parser.get_chapters()
    else:
        with open(input_file, 'r', encoding='utf-8') as file:
            text = file.read()
        chapters = [{'title': 'Chapter 1', 'content': text}]
    if stream:
        import asyncio
        for chapter in chapters:
            print(f"\nStreaming: {chapter['title']}")
            chunks = chunk_text(chapter['content'], initial_chunk_size=1000)
            asyncio.run(stream_audio(kokoro, chapter['content'], voice, speed, lang, debug))
    else:
        if split_output:
            os.makedirs(split_output, exist_ok=True)
            for chapter_num, chapter in enumerate(chapters, 1):
                chapter_dir = os.path.join(split_output, f"chapter_{chapter_num:03d}")
                if os.path.exists(chapter_dir):
                    info_file = os.path.join(chapter_dir, "info.txt")
                    if os.path.exists(info_file):
                        chunks = chunk_text(chapter['content'], initial_chunk_size=1000)
                        total_chunks = len(chunks)
                        existing_chunks = len([f for f in os.listdir(chapter_dir) 
                                            if f.startswith("chunk_") and f.endswith(f".{format}")])
                        if existing_chunks == total_chunks:
                            print(f"\nSkipping {chapter['title']}: Already completed ({existing_chunks} chunks)")
                            continue
                        else:
                            print(f"\nResuming {chapter['title']}: Found {existing_chunks}/{total_chunks} chunks")
                print(f"\nProcessing: {chapter['title']}")
                os.makedirs(chapter_dir, exist_ok=True)
                info_file = os.path.join(chapter_dir, "info.txt")
                if not os.path.exists(info_file):
                    with open(info_file, "w", encoding="utf-8") as f:
                        f.write(f"Title: {chapter['title']}\n")
                chunks = chunk_text(chapter['content'], initial_chunk_size=1000)
                total_chunks = len(chunks)
                processed_chunks = len([f for f in os.listdir(chapter_dir) 
                                     if f.startswith("chunk_") and f.endswith(f".{format}")])
                for chunk_num, chunk in enumerate(chunks, 1):
                    if stop_audio:
                        break
                    chunk_file = os.path.join(chapter_dir, f"chunk_{chunk_num:03d}.{format}")
                    if os.path.exists(chunk_file):
                        continue
                    filled = "■" * processed_chunks
                    remaining = "□" * (total_chunks - processed_chunks)
                    progress_bar = f"[{filled}{remaining}] ({processed_chunks}/{total_chunks})"
                    stop_spinner = False
                    spinner_thread = threading.Thread(
                        target=spinning_wheel,
                        args=(f"Processing {chapter['title']}", progress_bar)
                    )
                    spinner_thread.start()
                    try:
                        samples, sample_rate = process_chunk_sequential(
                            chunk, kokoro, voice, speed, lang, 
                            retry_count=0, debug=debug
                        )
                        if samples is not None:
                            sf.write(chunk_file, samples, sample_rate)
                            processed_chunks += 1
                    except Exception as e:
                        print(f"\nError processing chunk {chunk_num}: {e}")
                    stop_spinner = True
                    spinner_thread.join()
                    if stop_audio:
                        break
                print(f"\nCompleted {chapter['title']}: {processed_chunks}/{total_chunks} chunks processed")
                if stop_audio:
                    break
            print(f"\nCreated audio files for {len(chapters)} chapters in {split_output}/")
        else:
            all_samples = []
            sample_rate = None
            for chapter_num, chapter in enumerate(chapters, 1):
                print(f"\nProcessing: {chapter['title']}")
                chunks = chunk_text(chapter['content'], initial_chunk_size=1000)
                processed_chunks = 0
                total_chunks = len(chunks)
                for chunk_num, chunk in enumerate(chunks, 1):
                    if stop_audio:
                        break
                    stop_spinner = False
                    spinner_thread = threading.Thread(
                        target=spinning_wheel,
                        args=(f"Processing chunk {chunk_num}/{total_chunks}",)
                    )
                    spinner_thread.start()
                    try:
                        samples, sr = process_chunk_sequential(
                            chunk, kokoro, voice, speed, lang,
                            retry_count=0, debug=debug
                        )
                        if samples is not None:
                            if sample_rate is None:
                                sample_rate = sr
                            all_samples.extend(samples)
                            processed_chunks += 1
                    except Exception as e:
                        print(f"\nError processing chunk {chunk_num}: {e}")
                    stop_spinner = True
                    spinner_thread.join()
                print(f"\nCompleted {chapter['title']}: {processed_chunks}/{total_chunks} chunks processed")
            if all_samples:
                print("\nSaving complete audio file...")
                if not output_file:
                    output_file = f"{os.path.splitext(input_file)[0]}.{format}"
                sf.write(output_file, all_samples, sample_rate)
                print(f"Created {output_file}")

async def stream_audio(kokoro, text, voice, speed, lang, debug=False):
    global stop_spinner, stop_audio
    stop_spinner = False
    stop_audio = False
    
    print("Starting audio stream...")
    chunks = chunk_text(text, initial_chunk_size=1000)
    
    for i, chunk in enumerate(chunks, 1):
        if stop_audio:
            break
        # Update progress percentage
        progress = int((i / len(chunks)) * 100)
        spinner_thread = threading.Thread(
            target=spinning_wheel, 
            args=(f"Streaming chunk {i}/{len(chunks)}",)
        )
        spinner_thread.start()
        
        async for samples, sample_rate in kokoro.create_stream(
            chunk, voice=voice, speed=speed, lang=lang
        ):
            if stop_audio:
                break
            if debug:
                print(f"\nDEBUG: Playing chunk of {len(samples)} samples")
            sd.play(samples, sample_rate)
            sd.wait()
        
        stop_spinner = True
        spinner_thread.join()
        stop_spinner = False
    
    print("\nStreaming completed.")

def handle_ctrl_c(signum, frame):
    global stop_spinner, stop_audio
    print("\nCtrl+C detected, stopping...")
    stop_spinner = True
    stop_audio = True
    sys.exit(0)

# Register the signal handler for SIGINT (Ctrl+C)
signal.signal(signal.SIGINT, handle_ctrl_c)

def get_valid_options():
    """Return a set of valid command line options"""
    return {
        '-h', '--help',
        '--help-languages',
        '--help-voices',
        '--merge-chunks',
        '--api',
        '--port',
        '--host',
        '--stream',
        '--speed',
        '--lang',
        '--voice',
        '--split-output',
        '--format',
        '--debug'
    }

if __name__ == "__main__":
    # Validate command line options first
    valid_options = get_valid_options()
    unknown_options = []
    
    # Check for unknown options
    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]
        if arg.startswith('--') or arg.startswith('-'):
            # Check if it's a valid option
            if arg not in valid_options:
                unknown_options.append(arg)
            # Skip the next argument if it's a value for an option that takes parameters
            elif arg in {'--speed', '--lang', '--voice', '--split-output', '--format'}:
                i += 1
        i += 1
    
    # If unknown options were found, show error and help
    if unknown_options:
        print("Error: Unknown option(s):", ", ".join(unknown_options))
        print("\nDid you mean one of these?")
        for unknown in unknown_options:
            # Find similar valid options using string similarity
            similar = difflib.get_close_matches(unknown, valid_options, n=3, cutoff=0.4)
            if similar:
                print(f"  {unknown} -> {', '.join(similar)}")
        print("\n")  # Add extra newline for spacing
        print_usage()  # Show the full help text
        sys.exit(1)
    
    # Handle help commands first
    if len(sys.argv) == 2:
        if sys.argv[1] in ['-h', '--help']:
            print_usage()
            sys.exit(0)
        elif sys.argv[1] == '--help-languages':
            print_supported_languages()
            sys.exit(0)
        elif sys.argv[1] == '--help-voices':
            print_supported_voices()
            sys.exit(0)
    
    # Check for --api early
    if '--api' in sys.argv:
        # Find port and host if specified
        port = 8000
        host = "127.0.0.1"
        if '--port' in sys.argv:
            idx = sys.argv.index('--port')
            if idx + 1 < len(sys.argv):
                try:
                    port = int(sys.argv[idx + 1])
                except ValueError:
                    print("Error: --port must be followed by a number")
                    sys.exit(1)
        if '--host' in sys.argv:
            idx = sys.argv.index('--host')
            if idx + 1 < len(sys.argv):
                host = sys.argv[idx + 1]
        print(f"Starting Kokoro TTS API server at http://{host}:{port} ...")
        subprocess.run([sys.executable, '-m', 'uvicorn', 'api:app', '--reload', '--host', host, '--port', str(port)])
        sys.exit(0)
    
    # Parse arguments
    input_file = None
    if len(sys.argv) > 1 and not sys.argv[1].startswith('--'):
        input_file = sys.argv[1]
        output_file = sys.argv[2] if len(sys.argv) > 2 and not sys.argv[2].startswith('--') else None
    else:
        output_file = None

    stream = '--stream' in sys.argv
    speed = 1.0  # default speed
    lang = "en-us"  # default language
    voice = None  # default to interactive selection
    split_output = None
    format = "wav"  # default format
    merge_chunks = '--merge-chunks' in sys.argv
    
    # Parse optional arguments
    for i, arg in enumerate(sys.argv):
        if arg == '--speed' and i + 1 < len(sys.argv):
            try:
                speed = float(sys.argv[i + 1])
            except ValueError:
                print("Error: Speed must be a number")
                sys.exit(1)
        elif arg == '--lang' and i + 1 < len(sys.argv):
            lang = sys.argv[i + 1]
        elif arg == '--voice' and i + 1 < len(sys.argv):
            voice = sys.argv[i + 1]
        elif arg == '--split-output' and i + 1 < len(sys.argv):
            split_output = sys.argv[i + 1]
        elif arg == '--format' and i + 1 < len(sys.argv):
            format = sys.argv[i + 1].lower()
            if format not in ['wav', 'mp3']:
                print("Error: Format must be either 'wav' or 'mp3'")
                sys.exit(1)
    
    # Handle merge chunks operation
    if merge_chunks:
        if not split_output:
            print("Error: --split-output directory must be specified when using --merge-chunks")
            sys.exit(1)
        merge_chunks_to_chapters(split_output, format)
        sys.exit(0)
    
    # Normal processing mode
    if not input_file:
        print("Error: Input file required for text-to-speech conversion")
        print_usage()
        sys.exit(1)

    # Ensure the input file exists
    if not os.access(input_file, os.R_OK):
        print(f"Error: Cannot read from {input_file}. File may not exist or you may not have permission to read it.")
        sys.exit(1)
    
    # Ensure the output file has a proper extension if specified
    if output_file and not output_file.endswith(('.' + format)):
        print(f"Error: Output file must have .{format} extension.")
        sys.exit(1)
    
    # Add debug flag
    debug = '--debug' in sys.argv
    
    # Convert text to audio with debug flag
    convert_text_to_audio(input_file, output_file, voice=voice, stream=stream, 
                         speed=speed, lang=lang, split_output=split_output, 
                         format=format, debug=debug)

